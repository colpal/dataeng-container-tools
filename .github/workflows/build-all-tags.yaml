name: Build All Package Tags

on:
  workflow_dispatch:
  push:

permissions:
  contents: read
  id-token: write

jobs:
  build-all-tags:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch all tags
        shell: bash
        run: git fetch --tags

      - name: Install UV
        uses: astral-sh/setup-uv@v6
        with:
          version: "0.8.15"
          python-version: "3.13"
          activate-environment: true
          enable-cache: false

      - name: Install build tools
        shell: bash
        run: |
          uv pip install twine==6.1.0

      - id: oidc
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.VAULT_IAP_SA }}
          id_token_audience: ${{ secrets.VAULT_IAP_CLIENT_ID }}
          token_format: id_token
          id_token_include_email: true

      - name: Retrieve secrets from Vault
        id: vault
        uses: hashicorp/vault-action@v3
        with:
          url: ${{ secrets.VAULT_URL }}
          method: jwt
          role: ${{ github.event.repository.name }}
          exportEnv: false
          extraHeaders: "Authorization: Bearer ${{ steps.oidc.outputs.id_token }}"
          secrets: |
            ${{ secrets.VAULT_SECRET_PATH }} | password;

      - name: Build and release Python package for each tag
        shell: bash
        run: |
          for tag in $(git tag | grep '^v' | sort -V); do
            echo "Processing $tag"

            # Create a clean directory for this tag
            WORK_DIR="build_${tag}"
            rm -rf "$WORK_DIR" 2>/dev/null || true
            git clone . "$WORK_DIR" --quiet
            cd "$WORK_DIR"
            git checkout "$tag" --quiet
            # Old versions have a dist folder with all packages
            rm -rf dist 2>/dev/null || true

            # Cleanup legacy projects
            if [ -f "setup.py" ]; then
              VERSION="${tag#v}"
              sed -i "s/version=['\"][^'\"]*['\"]/version=\"$VERSION\"/" setup.py
              sed -i 's/name="dataEng-container-tools"/name="dataeng-container-tools"/' setup.py
            fi

            # Build the Python package
            uv build --quiet

            # Push to artifact registry
            # Note skip-existing was removed in 6.2.0 of Twine
            twine upload dist/* \
              --repository-url ${{ secrets.ARTIFACT_REGISTRY_URL }} \
              --username ${{ secrets.ARTIFACT_REGISTRY_USERNAME }} \
              --password "${{ steps.vault.outputs.password }}" \
              --non-interactive \
              --disable-progress-bar \
              --skip-existing

            # Clean up
            cd ..
            rm -rf "$WORK_DIR" 2>/dev/null || true
          done
